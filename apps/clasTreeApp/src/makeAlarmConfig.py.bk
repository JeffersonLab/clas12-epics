#!/bin/python
from clas12NodesDict import *
import argparse
import datetime


#This is a template for how to a run a command on the whole hierarchy of nodes from a starting point downwards.
#The doNode() function does the work
#It calls functions here as apropriate:

#The following 4 functions need to be defined.
#main():             to do any initialisation
#start_node():       called for every node before do_unto_elememt() is applied to all its elements    
#do_unto_element():  called for every element
#end_node():         called for every node after do_unto_elememt()  is applied to all its elements    

#This makes the .xml for setting up an alarm

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("top", help="top node")
    parser.add_argument("confname", help="Name of Alarm configuration")
    args   = parser.parse_args()
    topnode = args.top
    configName = args.confname

    now = datetime.datetime.now()
    print "<!--"
    print "   Alarm config generated by makeAlarmConfig.py on "+now.strftime("%Y-%m-%d %H:%M")
    print "-->"
    print "<config name=\""+configName+"\">"
    
    #This is the function that works recursively through the tree and calls do_unto_element start_node end_node
    doNode(topnode, 0, "", "HV")

    print"</config>"

def start_node(node,depth,indent,node_shortname):
    print indent+"   <component name=\""+node_shortname+"\">"
#    print indent+"#Node:"+node     #print the indented node name 
    return

def end_node(node,depth,indent,node_shortname):
    print indent+"   </component>"
    return

def do_unto_element(element,depth,indent,element_shortname):
    print indent+"   <pv name=\""+element+":trip\">"
    print indent+"      <description>High Voltage alarm for "+element+"</description>"
    print indent+"      <latching>true</latching>"
    print indent+"      <annunciating>true</annunciating>"
    print indent+"      <delay>2.0</delay>"
    print indent+"      <count>0</count>"
    print indent+"      <guidance>"
    print indent+"         <title>Guidance</title>"
    print indent+"         <details>Try to reset the voltage channel using the GUI. If problem persists, contact the expert.</details>"
    print indent+"      </guidance>"
    print indent+"      <display>"
    print indent+"         <title>Open HV GUI</title>"
    print indent+"         <details>HV.opi   &quot;pvName=BCAL:bias:D:32:2:alarm&quot;</details>"
    print indent+"      </display>"
    print indent+"   </pv>"

    return


#########################################################################################
# Recursion begins here
# Do not edit below here unless you know are prepared to disappear up your own arse     #
# Kenneth
#########################################################################################

def doNode( node, depth, indent,node_shortname):
    subnodes = SubNodeNames[node].split()
    elements = ElementNames[node].split()
        
    start_node( node, depth, indent, node_shortname)
    for s in subnodes:
        doNode( node+"_"+s, depth+1,indent+"   ", s )        
               
    for e in elements:
        do_unto_element(node+"_"+e,depth,indent+"   ", e)

    end_node ( node, depth, indent, node_shortname )
        
    return
    
if __name__ == "__main__": main()

