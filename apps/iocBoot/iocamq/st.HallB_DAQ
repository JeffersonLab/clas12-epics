#!../../bin/linux-x86_64/amq
#This file was created by using the command "awk -f makeIocs.gk clasrun.clasprod.daq.HallB_DAQ.dat" on Fri Nov 17 16:46:48 EST 2017

< envPaths

cd ${TOP}

## Register all support components
dbLoadDatabase "dbd/amq.dbd"
amq_registerRecordDeviceDriver pdbbase

#
ConnectMQ("tcp://clondb1:61616","clasrun.clasprod.daq.HallB_DAQ")

## Load record instances

#The RAWMESG key means don't parse for JSON, but writes the whole message into
#a waveform PV up to NELM characters. TYPE must be CHAR.
#Eg. dbLoadRecords("db/amqStringArray.db","P=B,K=RAWMSG,N=200")

#Now PVs pulling from json objects
#There are 4 types:
#1 Int
#2 Double
#3 Array of Ints
#4 Array of Doubles
#5 String

#Types 1 and 2 for into aiRecords
#Types 3,4,5 go into waveformRecords (with FTVL=DBR_LONG, DBR_DOUBLE, DBR_CHAR respectively) 

#The required macros are:
#P = Prefix
#K = json key
#N = No of elements in the array, if required

dbLoadRecords("db/amqStringArray.db","P=B_HallB_DAQ_RAWMSG,K=RAWMSG,N=200,TH=0,THH=0,HSV=NO_ALARM,HHSV=NO_ALARM")
dbLoadRecords("db/amqInt.db","P=B_HallB_DAQ_LiveTime,K=LiveTime,TH=10,THH=20,HSV=MINOR,HHSV=MAJOR")
dbLoadRecords("db/amqDouble.db","P=B_HallB_DAQ_EventRate,K=EventRate,TH=10,THH=20,HSV=MINOR,HHSV=MAJOR")
dbLoadRecords("db/amqIntArray.db","P=B_HallB_DAQ_TestScalers,K=TestScalers,N=20,TH=10,THH=20,HSV=MINOR,HHSV=MAJOR")
dbLoadRecords("db/amqDoubleArray.db","P=B_HallB_DAQ_TestVals,K=TestVals,N=20,TH=5,THH=10,HSV=MINOR,HHSV=MAJOR")
dbLoadRecords("db/amqStringArray.db","P=B_HallB_DAQ_NameAddress,K=NameAddress,N=100,TH=0,THH=0,HSV=NO_ALARM,HHSV=NO_ALARM")
dbLoadRecords("db/amqIntArray.db","P=B_HallB_DAQ_FTScalers,K=FTScalers,N=100,TH=0,THH=30,HSV=NO_ALARM,HHSV=MAJOR")
dbLoadRecords("db/amqDoubleArray.db","P=B_HallB_DAQ_FTClusterPosition,K=FTClusterPosition,N=1000,TH=0,THH=30,HSV=NO_ALARM,HHSV=MAJOR")
dbLoadRecords("db/amqDoubleArray.db","P=B_HallB_DAQ_FTClusterEnergy,K=FTClusterEnergy,N=1000,TH=0,THH=30,HSV=NO_ALARM,HHSV=MAJOR")
dbLoadRecords("db/amqDoubleArray.db","P=B_HallB_DAQ_FTClusterNHits,K=FTClusterNHits,N=9,TH=0,THH=30,HSV=NO_ALARM,HHSV=MAJOR")
dbLoadRecords("db/amqDoubleArray.db","P=B_HallB_DAQ_FTClusterPositionHodo,K=FTClusterPositionHodo,N=1000,TH=0,THH=30,HSV=NO_ALARM,HHSV=MAJOR")
dbLoadRecords("db/amqDoubleArray.db","P=B_HallB_DAQ_FTClusterEnergyHodo,K=FTClusterEnergyHodo,N=1000,TH=0,THH=30,HSV=NO_ALARM,HHSV=MAJOR")
dbLoadRecords("db/amqDoubleArray.db","P=B_HallB_DAQ_FTClusterNHitsHodo,K=FTClusterNHitsHodo,N=9,TH=0,THH=30,HSV=NO_ALARM,HHSV=MAJOR")

dbLoadRecords("$(DEVIOCSTATS)/db/iocAdminSoft.db","IOC=$(IOC)")

cd ${TOP}/iocBoot/${IOC}
iocInit

#Need this to start responding to messages after all records are defined
StartMQ()
