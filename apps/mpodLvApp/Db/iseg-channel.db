record(ai,"$(HV):outputConfigMaxCurrentR") {
	field(DESC,"Max possible output current")
	field(SCAN,"10 second")
	field(DTYP,"Snmp")
	field(INP,"@$(HVHOST) public %{W}outputConfigMaxCurrent.$(HVCH) Float: 100")
	field(PREC,"6")
	field(EGU,"A")
}
record(ai,"$(HV):outputConfigMaxSenseVR") {
	field(DESC,"Max possible output Termninal Voltage")
	field(SCAN,"10 second")
	field(DTYP,"Snmp")
	field(INP,"@$(HVHOST) public %{W}outputConfigMaxSenseVoltage.$(HVCH) Float: 100")
	field(PREC,"6")
	field(EGU,"V")
}
record(ai,"$(HV):outputConfigMaxTermVR") {
	field(DESC,"Max possible output Termninal Voltage")
	field(SCAN,"10 second")
	field(DTYP,"Snmp")
	field(INP,"@$(HVHOST) public %{W}outputConfigMaxTerminalVoltage.$(HVCH) Float: 100")
	field(PREC,"6")
	field(EGU,"V")
}
record(ai,"$(HV):outputCurrentFallRateR") {
	field(DESC,"output currernt decreasing slew rate")
	field(SCAN,"10 second")
	field(DTYP,"Snmp")
	field(INP,"@$(HVHOST) public %{W}outputCurrentFallRate.$(HVCH) Float: 100")
	field(PREC,"5")
	field(EGU,"A/s")
}
record(ai,"$(HV):outputCurrentRC") {
	field(SCAN,"10 second")
	field(DTYP,"Snmp")
	field(FLNK,"$(HV):outputCurrentR.PROC")
	field(INP,"@$(HVHOST) public %{W}outputCurrent.$(HVCH) Float: 100")
	field(PREC,"5")
	field(EGU,"A")
}
record(ai,"$(HV):outputCurrentRiseRateR") {
	field(DESC,"output current increasing slew rate")
	field(SCAN,"10 second")
	field(DTYP,"Snmp")
	field(INP,"@$(HVHOST) public %{W}outputCurrentRiseRate.$(HVCH) Float: 100")
	field(PREC,"6")
	field(EGU,"A/s")
}
record(ai,"$(HV):outputMeasCurrentC") {
	field(SCAN,"1 second")
	field(DTYP,"Snmp")
	field(FLNK,"$(HV):outputMeasCurrent.PROC")
	field(INP,"@$(HVHOST) public %{W}outputMeasurementCurrent.$(HVCH) Float: 100 Fn")
	field(PREC,"7")
	field(EGU,"A")
#	field(HOPR,"5")
#	field(HIHI,"0.000002")
#	field(HIGH,"0.0000007")
#	field(LOW,"0.0000002")
#	field(HHSV,"MAJOR")
#	field(HSV,"MINOR")
#	field(LSV,"MINOR")
    info(autosaveFields_pass1,"HOPR HIHI HIGH LOLO LOW HHSV HSV LLSV LSV")
}
record(ai,"$(HV):outputMeasSenseV") {
	field(DESC,"Measured output voltage")
#field(SCAN,"Passive")
    field(SCAN,"10 second")
	field(DTYP,"Snmp")
	field(FLNK,"$(HV):outputMeasSenseVAlm.PROC")
	field(INP,"@$(HVHOST) public %{W}outputMeasurementSenseVoltage.$(HVCH) Float: 100")
	field(PREC,"2")
	field(EGU,"V")
    info(autosaveFields_pass1,"HOPR HIHI HIGH LOLO LOW HHSV HSV LLSV LSV")
}
record(ai,"$(HV):outputMeasTermVR") {
	field(DESC,"Measured voltage output terminals")
	field(SCAN,"1 second")
	field(DTYP,"Snmp")
	field(INP,"@$(HVHOST) public %{W}outputMeasurementTerminalVoltage.$(HVCH) Float: 100")
	field(PREC,"6")
	field(EGU,"V")
    info(autosaveFields_pass1,"HOPR HIHI HIGH LOLO LOW HHSV HSV LLSV LSV")
    alias("$(HV):vmon")
}
record(ai,"$(HV):outputVoltageFallRateR") {
	field(DESC,"output voltage decreasing slew rate")
	field(SCAN,"10 second")
	field(DTYP,"Snmp")
	field(INP,"@$(HVHOST) public %{W}outputVoltageFallRate.$(HVCH) Float: 100")
	field(PREC,"5")
	field(EGU,"V")
}
record(ai,"$(HV):outputVoltageR") {
	field(SCAN,"10 second")
	field(DTYP,"Snmp")
	field(INP,"@$(HVHOST) public %{W}outputVoltage.$(HVCH) Float: 100")
	field(PREC,"2")
	field(EGU,"V")
    alias("$(HV):vsetrbk")
}
record(ai,"$(HV):outputVoltageRiseRateR") {
	field(DESC,"output voltage increasing slew rate")
	field(SCAN,"10 second")
	field(DTYP,"Snmp")
	field(INP,"@$(HVHOST) public %{W}outputVoltageRiseRate.$(HVCH) Float: 100")
	field(PREC,"5")
	field(EGU,"V/s")
}
record(ao,"$(HV):outputConfigMaxCurrent") {
	field(DESC,"Max possible output current")
	field(DTYP,"Soft Channel")
	field(PREC,"6")
	field(EGU,"A")
	field(HOPR,"5")
}
record(ao,"$(HV):outputConfigMaxSenseV") {
	field(DESC,"Max possible output terminal Voltage")
	field(DTYP,"Soft Channel")
	field(PREC,"6")
	field(EGU,"V")
	field(HOPR,"8")
}
record(ao,"$(HV):outputConfigMaxTermV") {
	field(DESC,"Max possible output terminal Voltage")
	field(DTYP,"Soft Channel")
	field(PREC,"6")
	field(EGU,"V")
	field(HOPR,"8")
}
record(ao,"$(HV):outputCurrent") {
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outputCurrent_calc.PROC")
	field(DOL,"4")
	field(PREC,"5")
	field(EGU,"uA")
    alias("$(HV):iset")
}
record(calcout,"$(HV):outputCurrent_calc") {
	field(OUT,"$(HV):outputCurrentC PP")
	field(CALC,"A*1.e-6")
	field(INPA,"$(HV):outputCurrent")
	field(EGU,"A")
    field(OOPT,"Every Time")
    field(DOPT,"Use CALC")
}
record(ao,"$(HV):outputCurrentC") {
	field(DTYP,"Snmp")
	field(OUT,"@$(HVHOST) guru %{W}outputCurrent.$(HVCH) Float: 100 F")
	field(PREC,"5")
	field(EGU,"A")
}
record(ao,"$(HV):outputCurrentFallRate") {
	field(DESC,"output current decreasing slew rate")
	field(DTYP,"Snmp")
	field(OUT,"@$(HVHOST) guru %{W}outputCurrentFallRate.$(HVCH) Float: 100 F")
	field(PREC,"6")
	field(EGU,"A/s")
	field(HOPR,"8")
}
record(ao,"$(HV):outputCurrentRiseRate") {
	field(DESC,"output current increasing slew rate")
	field(DTYP,"Snmp")
	field(OUT,"@$(HVHOST) guru %{W}outputCurrentRiseRate.$(HVCH) Float: 100 F")
	field(PREC,"6")
	field(EGU,"A/s")
	field(HOPR,"8")
}
record(ao,"$(HV):outputVoltage") {
	field(DTYP,"Snmp")
	field(OUT,"@$(HVHOST) guru %{W}outputVoltage.$(HVCH) Float: 100 F")
	field(DOL,"85")
	field(PREC,"2")
	field(EGU,"V")
	field(HOPR,"100")
    alias("$(HV):vset")
}
record(ao,"$(HV):outputVoltageFallRate") {
	field(DESC,"output voltage decreasing slew rate")
	field(DTYP,"Snmp")
	field(OUT,"@$(HVHOST) guru %{W}outputVoltageFallRate.$(HVCH) Float: 100 F")
	field(PREC,"6")
	field(EGU,"V/s")
	field(HOPR,"8")
    alias("$(HV):rdn")
}
record(ao,"$(HV):outputVoltageRiseRate") {
	field(DESC,"output voltage increasing slew rate")
	field(DTYP,"Snmp")
	field(OUT,"@$(HVHOST) guru %{W}outputVoltageRiseRate.$(HVCH) Float: 100 F")
	field(PREC,"6")
	field(EGU,"V/s")
	field(HOPR,"8")
    alias("$(HV):rup")
}
record(bi,"$(HV):outAdjusting") {
	field(DESC,"Fine adjustment is working")
	field(DTYP,"Soft Channel")
	field(INP,"$(HV):outputStatus1.B0 NPP NMS")
	field(OSV,"MAJOR")
	field(ZNAM,"not active")
	field(ONAM,"active")
}
record(bi,"$(HV):outConstantVoltage") {
	field(DESC,"Constant Voltage Control")
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outVoltageBoundsX.PROC")
	field(INP,"$(HV):outputStatus2.B8 NPP NMS")
	field(OSV,"MAJOR")
	field(ZNAM,"not active")
	field(ONAM,"active")
}
record(bi,"$(HV):outCurrentBoundsX") {
	field(DESC,"output Voltage out of bounds")
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outFailCurrentLimit.PROC")
	field(INP,"$(HV):outputStatus2.B6 NPP NMS")
	field(OSV,"MAJOR")
	field(ZNAM,"Ok")
	field(ONAM,"Exceeded")
}
record(bi,"$(HV):outCurrentLimit") {
	field(DESC,"current limiting (constant current mode)")
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outFailMaxCurrent.PROC")
	field(INP,"$(HV):outputStatus1.B5 NPP NMS")
	field(OSV,"MAJOR")
	field(ZNAM,"not active")
	field(ONAM,"active")
}
record(bi,"$(HV):outEmergencyOff") {
	field(DESC,"EmergencyOff is active")
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outAdjusting.PROC")
	field(INP,"$(HV):outputStatus1.B1 NPP NMS")
	field(OSV,"MAJOR")
	field(ZNAM,"not active")
	field(ONAM,"active")
}
record(bi,"$(HV):outEnableKill") {
	field(DESC,"EnableKill is active")
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outEmergencyOff.PROC")
	field(INP,"$(HV):outputStatus1.B2 NPP NMS")
	field(OSV,"MAJOR")
	field(ZNAM,"not active")
	field(ONAM,"active")
}
record(bi,"$(HV):outFailCurrentLimit") {
	field(DESC,"Hardware current limit")
	field(DTYP,"Soft Channel")
	field(INP,"$(HV):outputStatus2.B5 NPP NMS")
	field(OSV,"MAJOR")
	field(ZNAM,"not active")
	field(ONAM,"active")
}
record(bi,"$(HV):outFailMaxCurrent") {
	field(DESC,"current is too high")
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outRampUp.PROC")
	field(INP,"$(HV):outputStatus1.BA NPP NMS")
	field(ZNAM,"no failure")
	field(ONAM,"failure")
}
record(bi,"$(HV):outFailMaxPower") {
	field(DESC,"output power is too high")
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outEnableKill.PROC")
	field(INP,"$(HV):outputStatus1.B8 NPP NMS")
	field(OSV,"MAJOR")
	field(ZNAM,"no failure")
	field(ONAM,"failure")
}
record(bi,"$(HV):outFailMaxSnsVlt") {
	field(DESC,"sense voltage is too high")
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outFailTimeout.PROC")
	field(INP,"$(HV):outputStatus1.BC NPP NMS")
	field(OSV,"MAJOR")
	field(ZNAM,"no failure")
	field(ONAM,"failure")
}
record(bi,"$(HV):outFailMaxTVolt") {
	field(DESC,"terminal voltage is too high")
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outCurrentLimit.PROC")
	field(INP,"$(HV):outputStatus1.BB NPP NMS")
	field(OSV,"MAJOR")
	field(ZNAM,"no failure")
	field(ONAM,"failure")
}
record(bi,"$(HV):outFailMaxTemp") {
	field(DESC,"heat sink temperature is too high")
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outRampDown.PROC")
	field(INP,"$(HV):outputStatus1.B9 NPP NMS")
	field(OSV,"MAJOR")
	field(ZNAM,"no failure")
	field(ONAM,"failure")
}
record(bi,"$(HV):outFailMinSnsVlt") {
	field(DESC,"sense voltage is too low")
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outFailMaxSnsVlt.PROC")
	field(INP,"$(HV):outputStatus1.BD NPP NMS")
	field(OSV,"MAJOR")
	field(ZNAM,"no failure")
	field(ONAM,"failure")
}
record(bi,"$(HV):outFailTimeout") {
	field(DESC,"comm timeout between channel & control")
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outFailMaxTVolt.PROC")
	field(INP,"$(HV):outputStatus1.B6 NPP NMS")
	field(OSV,"MAJOR")
	field(ZNAM,"no failure")
	field(ONAM,"failure")
}
record(bi,"$(HV):outInhibit") {
	field(DESC,"external hardware inhibit of channel")
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outFailMinSnsVlt.PROC")
	field(INP,"$(HV):outputStatus1.BE NPP NMS")
	field(OSV,"MAJOR")
	field(ZNAM,"no inhibit")
	field(ONAM,"inhibit")
}
record(bi,"$(HV):outOn") {
	field(DESC,"System is switched on=1/off=0")
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outInhibit.PROC")
	field(INP,"$(HV):outputStatus1.BF NPP NMS")
	field(ZSV,"MAJOR")
	field(ZNAM,"Off")
	field(ONAM,"On")
}
record(bi,"$(HV):outRampDown") {
	field(DESC,"Output voltage decreasing")
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outFailMaxPower.PROC")
	field(INP,"$(HV):outputStatus1.B3 NPP NMS")
	field(OSV,"MAJOR")
	field(ZNAM,"not decreasing")
	field(ONAM,"decreasing")
}
record(bi,"$(HV):outRampUp") {
	field(DESC,"output voltage increasing")
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outFailMaxTemp.PROC")
	field(INP,"$(HV):outputStatus1.B4 NPP NMS")
	field(OSV,"MAJOR")
	field(ZNAM,"not increasing")
	field(ONAM,"increasing")
}
record(bi,"$(HV):outVoltageBoundsX") {
	field(DESC,"output Voltage out of bounds")
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outCurrentBoundsX.PROC")
	field(INP,"$(HV):outputStatus2.B7 NPP NMS")
	field(OSV,"MAJOR")
	field(ZNAM,"Ok")
	field(ONAM,"Exceeded")
}
record(calc,"$(HV):LV_RampDelaycalc") {
	field(SCAN,"5 second")
	field(FLNK,"$(HV):LV_RampDelay.PROC")
	field(CALC,"C*((B/A)+8)")
	field(INPA,"$(HV):outputVoltageFallRate NPP NMS")
	field(INPB,"$(HV):outputVoltageR NPP NMS")
	field(INPC,"$(HV):outOn NPP NMS")
}
record(calc,"$(HV):RAMPING") {
	field(DESC,"Module Ramping")
	field(SCAN,"1 second")
	field(CALC,"A || B")
	field(INPA,"$(HV):outRampUp NPP NMS")
	field(INPB,"$(HV):outRampDown NPP NMS")
}
record(calc,"$(HV):modErr") {
	field(DESC,"channel Error")
	field(SCAN,"1 second")
	field(CALC,"(A&0x3f0000)||(B>1)||(D>1)")
	field(INPA,"$(HV):outputStatuslong NPP NMS")
	field(INPB,"$(HV):outputMeasSenseVAlm.SEVR NPP NMS")
	field(INPD,"$(HV):outputMeasCurrentAlm.SEVR NPP NMS")
	field(HIHI,".7")
	field(HHSV,"MAJOR")
}
record(calc,"$(HV):outputCurrentR") {
	field(CALC,"A*1e6")
	field(INPA,"$(HV):outputCurrentRC NPP NMS")
	field(EGU,"uA")
	field(PREC,"5")
    alias("$(HV):isetrbk")
}
record(calc,"$(HV):outputMeasCurrent") {
	field(FLNK,"$(HV):outputMeasCurrentAlm.PROC")
	field(CALC,"A*1.e6")
	field(INPA,"$(HV):outputMeasCurrentC NPP MS")
	field(EGU,"uA")
	field(PREC,"5")
#	field(HOPR,"5")
#	field(HIHI,"2.0")
#	field(HIGH,"0.7")
#	field(LOW,"0.1")
#	field(HHSV,"MAJOR")
#	field(HSV,"MINOR")
#	field(LSV,"MINOR")
    info(autosaveFields_pass1,"HOPR HIHI HIGH LOLO LOW HHSV HSV LLSV LSV")
    alias("$(HV):imon")
}
record(calc,"$(HV):outputMeasCurrentAlm") {
	field(DESC,"Interlock alarm current")
	field(CALC,"D>4?(A&&!B)*C*(-1)*D:(A&&!B)*C*D")
	field(INPA,"$(HV):outOn NPP NMS")
	field(INPB,"$(HV):RAMPING NPP NMS")
	field(INPC,"$(HV):outputMeasCurrent.SEVR NPP NMS")
	field(INPD,"$(HV):outputMeasCurrent.STAT NPP NMS")
#	field(HIHI,"5")
#	field(LOLO,"-9")
#	field(HIGH,"3")
#	field(LOW,"-5")
#	field(HHSV,"MAJOR")
#	field(LLSV,"MAJOR")
#	field(HSV,"MINOR")
#	field(LSV,"MINOR")
    info(autosaveFields_pass1,"HOPR HIHI HIGH LOLO LOW HHSV HSV LLSV LSV")
}
record(calc,"$(HV):outputMeasSenseVAlm") {
	field(DESC,"Interlock alarm current")
	field(PINI,"RUNNING")
	field(CALC,"(A && !B)&&(C<3)?C:0")
	field(INPA,"$(HV):outOn NPP NMS")
	field(INPB,"$(HV):RAMPING NPP NMS")
	field(INPC,"$(HV):outputMeasSenseV.SEVR NPP NMS")
	field(HIHI,"1.5")
	field(HIGH,".5")
	field(HHSV,"MAJOR")
	field(HSV,"MINOR")
}
record(calc,"$(HV):outputStatusc1") {
	field(FLNK,"$(HV):outputStatus1.PROC")
	field(CALC,"(A>>8)&(0xFFFF)")
	field(INPA,"$(HV):outputStatuslong NPP NMS")
}
record(calc,"$(HV):outputStatusc2") {
	field(FLNK,"$(HV):outputStatus2.PROC")
	field(CALC,"A&(0x000FF)")
	field(INPA,"$(HV):outputStatuslong NPP NMS")
}
record(fanout,"$(HV):outStatusfan1") {
	field(FLNK,"$(HV):outputStatusc1.PROC")
	field(LNK1,"$(HV):outputStatusc2")
}
record(longin,"$(HV):outSupervisionR") {
	field(DESC,"Bitfield Fail Behavior - see .db file")
	field(SCAN,"Passive")
#field(SCAN,"10 second")
    field(PINI,"1")
	field(DTYP,"Snmp")
	field(INP,"@$(HVHOST) public %{W}outputSupervisionBehavior.$(HVCH) INTEGER: 50")
}
record(longin,"$(HV):outputGroupR") {
	field(DESC,"Group num assigned to each channel")
#	field(SCAN,"10 second")
	field(SCAN,"Passive")
    field(PINI,"1")
	field(DTYP,"Snmp")
	field(INP,"@$(HVHOST) public %{W}outputGroup.$(HVCH) INTEGER: 80")
}
record(longin,"$(HV):outputIndex") {
	field(DESC,"Unique number for module")
    field(PINI,"1")
#field(SCAN,"10 second")
	field(SCAN,"Passive")
	field(DTYP,"Snmp")
	field(INP,"@$(HVHOST) public %{W}outputIndex.$(HVCH) ( 30")
}
record(longin,"$(HV):outputMeasTemp") {
	field(SCAN,"10 second")
	field(DTYP,"Snmp")
	field(INP,"@$(HVHOST) public %{W}outputMeasurementTemperature.$(HVCH) INTEGER: 50")
}
record(longin,"$(HV):outputStatuslong") {
	field(SCAN,"1 second")
	field(DTYP,"Snmp")
	field(FLNK,"$(HV):outStatusfan1.PROC")
	field(INP,"@$(HVHOST) public %{W}outputStatus.$(HVCH) BITS: 100 sh")
}
#record(stringin,"$(HV):outputStatusstring") {
#	field(SCAN,"1 second")
#	field(DTYP,"Snmp")
#	field(INP,"@$(HVHOST) public %{W}outputStatus.$(HVCH) BITS: 100")
#}
record(longin,"$(HV):outputTripTimeMaxCurrentR") {
	field(DESC,"current trip time out")
	field(SCAN,"10 second")
	field(DTYP,"Snmp")
	field(INP,"@$(HVHOST) public %{W}outputTripTimeMaxCurrent.$(HVCH) INTEGER: 80")
	field(EGU,"ms")
}
#record(longin,"$(HV):outputUserConfigR") {
#	field(DESC,"output channel behavior")
#	field(SCAN,"10 second")
#	field(DTYP,"Snmp")
#	field(INP,"@$(HVHOST) public %{W}outputUserConfig.$(HVCH) INTEGER: 80")
#}
record(longin,"$(HV):outswitchRlong") {
	field(DESC,"Channel switch 1=ENABLED,0=DISABLED")
	field(SCAN,"1 second")
	field(DTYP,"Snmp")
	field(FLNK,"$(HV):outswitchR.PROC")
	field(INP,"@$(HVHOST) public %{W}outputSwitch.$(HVCH) ( 30")
	field(LOLO,"0")
	field(HIGH,"2")
	field(LLSV,"MAJOR")
	field(HSV,"MINOR")
}
record(longout,"$(HV):outSupervision") {
	field(DESC,"Bitfield Fail Behavior - see .db file")
	field(DTYP,"Snmp")
	field(OUT,"@$(HVHOST) guru %{W}outputSupervisionBehavior.$(HVCH) INTEGER: 80 i")
}
record(longout,"$(HV):outputGroup") {
	field(DTYP,"Soft Channel")
}
record(longout,"$(HV):outputTripTimeMaxCurrent") {
	field(DESC,"Current trip time out")
	field(DTYP,"Snmp")
	field(OUT,"@$(HVHOST) guru %{W}outputTripTimeMaxCurrent.$(HVCH) INTEGER: 8 i")
	field(EGU,"ms")
    alias("$(HV):trip")
}
record(longout,"$(HV):outputUserConfig") {
	field(DESC,"output channel behavior")
	field(DTYP,"Snmp")
	field(OUT,"@$(HVHOST) guru %{W}outputUserConfig.$(HVCH) INTEGER: 80 i")
}
record(longout,"$(HV):outswitchlong") {
	field(DESC,"Channel switch 1=ENABLE,0=DISABLE")
	field(DTYP,"Snmp")
	field(OUT,"@$(HVHOST) guru %{W}outputSwitch.$(HVCH) ( 30 i")
	field(DOL,"$(HV):outSwitch NPP NMS")
	field(OMSL,"closed_loop")
}
record(mbbi,"$(HV):outswitchR") {
	field(DESC,"output channel state")
	field(DTYP,"Soft Channel")
	field(INP,"$(HV):outswitchRlong NPP MS")
	field(ZRST,"Off")
	field(ONST,"On")
	field(TWST,"resetEmergencyOff")
	field(THST,"setEmergencyOff")
	field(TEST,"clearEvents")
}
record(mbbiDirect,"$(HV):outputStatus1") {
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outOn.PROC")
	field(INP,"$(HV):outputStatusc1 NPP NMS")
}
record(mbbiDirect,"$(HV):outputStatus2") {
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outConstantVoltage.PROC")
	field(INP,"$(HV):outputStatusc2 NPP NMS")
}
record(mbbo,"$(HV):outSwitch") {
	field(DTYP,"Soft Channel")
	field(FLNK,"$(HV):outswitchlong.PROC")
	field(ZRVL,"0")
	field(ONVL,"1")
	field(TWVL,"2")
	field(THVL,"3")
	field(TEVL,"10")
	field(ZRST,"OFF")
	field(ONST,"ON")
	field(TWST,"EMER_RESET")
	field(THST,"EMER_OFF")
	field(TEST,"CLEAR")
    alias("$(HV):pwonoff")
}
#record(stringin,"$(HV)") {
#	field(DTYP,"Soft Channel")
#}
record(stringin,"$(HV):outputName") {
#field(SCAN,"10 second")
    field(PINI,"1")
	field(DTYP,"Snmp")
	field(INP,"@$(HVHOST) public %{W}outputName.$(HVCH) STRING: 80")
}


###############


# iseg requires a different global stat parser than lv modules:
#
#record(aSub,"$(HV):parse:stat")
#{
#	field( DESC, "HW status string parser")
#	field( SCAN, "Passive")
#	field( INAM, "MpodStatusParserInit")
#	field( SNAM, "MpodStatusParserProcess")
#	# Input stat_string
#	field( INPA, "$(HV):outputStatusstring CPP MS")
#	field(  FTA, "STRING")
#	field(  NOA, "1")
#	field(  NEA, "1")
#	# Input stat_string.STAT to check is the HW channel exists
#	field( INPB, "$(HV):outputStatuslong.STAT CPP MS")
#	field(  FTB, "USHORT")
#	field(  NOB, "1")
#	field(  NEB, "1")	
#	# Output into mbbiDirect record which can keep maximum 16bit
#	field( OUTA, "$(HV):parsed:status.RVAL PP MS")
#	field( FTVA, "ULONG")
#	field( NOVA, "1")
#	field( NEVA, "1")
#	# Output into bi record which can keep maximum 1bit
#	field( OUTB, "$(HV):parsed:stat PP MS")
#	field( FTVB, "USHORT")
#	field( NOVB, "1")
#	field( NEVB, "1")
#	# Output into stringin record which can keep maximum 80 characters
#	field( OUTC, "$(HV):parsed:stat_string PP MS")
#	field( FTVC, "STRING")
#	field( NOVC, "1")
#	field( NEVC, "1")
#}
#record( stringin, "$(HV):parsed:stat_string")
#{
#	field( DESC, "HW status parsed string")
#	field( SCAN, "Passive")
#}
#record( mbbiDirect, "$(HV):parsed:status")
#{
#	field( DESC, "HW status parsed result")
#	field( DTYP, "Raw Soft Channel")
#	field( SCAN, "Passive")
#}
#record( mbbi, "$(HV):parsed:status2")
#{
#	field( DESC, "HW status parsed result")
#	field( DTYP, "Soft Channel")
#    field( INP,  "$(HV):parsed:status CPP")
#	field( SCAN, "Passive")
#}
#record( bi, "$(HV):parsed:stat")
#{
#	field( DESC, "HW status parsed result")
#	field( SCAN, "Passive")
#	field( ZNAM, "Alarmed")
#	field( ONAM, "NO_ALARM")
#	field( ZSV, "MAJOR")
#	field( OSV, "NO_ALARM")
#}

###############

# this will alarm any time the channel is turned on/off
# or if voltage is not at spec
record(calc,"$(HV):termVoltDelta") {
    field(SCAN,"1 second")
    field(INPA,"$(HV):outswitchR")
    field(INPB,"$(HV):outputVoltageR")
    field(INPC,"$(HV):outputMeasTermVR")
    field(CALC,"A=0?ABS(C):ABS(C)-B")
    field(HSV,"MINOR")
    field(LSV,"MINOR")
    field(HIGH,"10")
    field(LOW,"-10")
    info(autosaveFields_pass1,"HIGH LOW HSV LSV")
}

###############
# instead, pull in the bits in a record:

# select relevant error status bit:
# (Note that the relevancy of these bits appears to be firmware-dependent,
# and this selection is for BONuS's iseg modules):
record(calcout,"$(HV):badstat:calc") {
    field(SCAN,"1 second")
    field(INPA,"$(HV):outInhibit")
    field(INPB,"$(HV):outFailMaxSnsVlt")
    field(INPC,"$(HV):outFailMaxTemp")
    field(INPD,"$(HV):outEnableKill")
    field(INPE,"$(HV):outEmergencyOff")
    field(INPF,"$(HV):outFailMaxPower")
    field(INPG,"$(HV):outFailMaxTVolt")
    field(CALC,"A>0?1:B>0?2:C>0?3:D>0?4:E>0?5:F>0?6:G>0?7:0")
    field(DOPT,"Use CALC")
    field(OOPT,"Every Time")
    field(OUT,"$(HV):badstat:mbbi PP")
}
record(mbbi,"$(HV):badstat:mbbi") {
    field(SCAN,"Passive")
    field(ZRVL,"0")
    field(ONVL,"1")
    field(TWVL,"2")
    field(THVL,"3")
    field(FRVL,"4")
    field(FVVL,"5")
    field(SXVL,"6")
    field(SVVL,"7")
    field(ZRSV,"NO_ALARM")
    field(ONSV,"MAJOR")
    field(TWSV,"MAJOR")
    field(THSV,"MAJOR")
    field(FRSV,"MAJOR")
    field(FVSV,"MAJOR")
    field(SXSV,"MAJOR")
    field(SVSV,"MAJOR")
    field(ZRST,"Ok")
    field(ONST,"OutInhibit")
    field(TWST,"MaxSenseV")
    field(THST,"MaxTemp")
    field(FRST,"Kill")
    field(FVST,"EmergOff")
    field(SXST,"MaxPower")
    field(SVST,"MaxTermV")
    field(FLNK,"$(HV):stat:calc PP")
}


# select most significant good status bit:
record(calc,"$(HV):stat:calc") {
    field(SCAN,"1 second")
    field(INPA,"$(HV):outOn")
    field(INPB,"$(HV):outRampUp")
    field(INPC,"$(HV):outRampDown")
    field(INPD,"$(HV):badstat:mbbi")
    field(CALC,"D>0?D+3:(B>0?2:(C>0?3:(A>0?1:0)))")
    field(FLNK,"$(HV):stat:calc2.PROC")
}
record(calcout,"$(HV):stat:calc2") {
    field(SCAN,"Passive")
    field(INPA,"$(HV):stat:calc")
    field(INPB,"$(HV):outputMeasCurrentC.SEVR")
    field(CALC,"B>0?11:A")
    field(DOPT,"Use CALC")
    field(OOPT,"Every Time")
    field(OUT,"$(HV):stat PP")
}

record(mbbi,"$(HV):stat") {
    field(SCAN,"Passive")
    field(ZRVL,"0")
    field(ONVL,"1")
    field(TWVL,"2")
    field(THVL,"3")
    field(FRVL,"4")
    field(FVVL,"5")
    field(SXVL,"6")
    field(SVVL,"7")
    field(EIVL,"8")
    field(NIVL,"9")
    field(TEVL,"10")
    field(ZRSV,"NO_ALARM")
    field(ONSV,"NO_ALARM")
    field(TWSV,"MINOR")
    field(THSV,"MINOR")
    field(FRSV,"MAJOR")
    field(FVSV,"MAJOR")
    field(SXSV,"MAJOR")
    field(SVSV,"MAJOR")
    field(EISV,"MAJOR")
    field(NISV,"MAJOR")
    field(TESV,"MAJOR")
    field(ELSV,"MAJOR")
    field(ZRST,"Off")
    field(ONST,"On")
    field(TWST,"RUp")
    field(THST,"RDn")
    field(FRST,"OutInhibit")
    field(FVST,"MaxSenseV")
    field(SXST,"MaxTemp")
    field(SVST,"Kill")
    field(EIST,"EmergOff")
    field(NIST,"MaxPower")
    field(TEST,"MaxTermV")
    field(ELST,"Comms")
    alias("$(HV)")
}

