#
# N. Baltzell, 2022
#
# EPICS support for Stanford Research Systems RGA-X00
#
# This device seems to terminate the connection if it's idle
# for one minute, and the docs claim it will terminate any
# ongoing measurement if it's sent any command.  So, we can't
# just let all readbacks poll.  Instead we have a single
# sequence record to poll all readbacks, and its SCAN field
# is set to Passive during measurements.
#

#################################################
# Authentication:
#################################################

# Authenticate by processing this on IOC bootup via PINI:
# (didn't get it to work reliably from protocol files, although
# it must be possible, meanwhile hardwiring to asyn's AOUT seems
# to work reliably)
record(seq, "$(P)$(R=):authorize") {
    field(LNK1, "$(P)$(R=):admin.PROC PP")
    field(DO1,  "1")
    field(DLY1, "1")
    field(LNK2, "$(P)$(R=):admin.PROC PP")
    field(DO2,  "1")
    field(DLY2, "1")
    field(LNK3, "$(P)$(R=):state:idle.PROC PP")
    field(DO3,  "1")
    field(DLY3, "1")
    field(PINI, "1")
}

# This tries to reconnect if the connection is terminated, three
# authentication entries *usually* seem necessary in this case:
record(seq, "$(P)$(R=):reconnect") {
    field(LNK1, "$(P)(R=).CNCT PP")
    field(DO1,  "0")
    field(DLY1, "0")
    field(LNK2, "$(P)$(R=):admin.PROC PP")
    field(DO2,  "1")
    field(DLY2, "5")
    field(LNK3, "$(P)$(R=):admin.PROC PP")
    field(DO3,  "1")
    field(DLY3, "1")
    field(LNK4, "$(P)$(R=):admin.PROC PP")
    field(DO4,  "1")
    field(DLY4, "1")
    field(LNK5, "$(P)$(R=):state:idle.PROC PP")
    field(DO5,  "1")
    field(DLY5, "5")
}

# Just send the username/password via asyn's AOUT field:
record(stringout, "$(P)$(R=):admin") {
    field(VAL, "ADMIN")
    field(OUT, "$(P)$(R=).AOUT PP")
}

#################################################
# States:
#################################################

record(mbbi, "$(P)$(R=):state") {
    field(ZRVL, 0)
    field(ZRST, "Initializing")
    field(ONVL, 1)
    field(ONST, "Idle")
    field(TWVL, 2)
    field(TWST, "Measuring")
    field(THVL, 3)
    field(THST, "Calibrating")
    field(VAL,0)
}
record(seq, "$(P)$(R=):state:idle") {
    field(LNK1, "$(P)$(R=):filament:off PP")
    field(DO1,  "1")
    field(DLY1, "1")
    field(LNK2, "$(P)$(R=):scan.SCAN PP")
    field(DO2,  "4")
    field(DLY2, "3")
    field(LNK3, "$(P)$(R=):state PP")
    field(DO3,  "1")
    field(DLY3, "0")
    field(LNK4, "$(P)$(R=):clock:stop PP")
    field(DO4,  "1")
}
record(seq, "$(P)$(R=):state:measure") {
    field(LNK1, "$(P)$(R=):state PP")
    field(DO1,  "2")
    field(LNK2, "$(P)$(R=):scan.SCAN PP")
    field(DO2,  "0")
}
record(seq, "$(P)$(R=):state:calibrate") {
    field(LNK1, "$(P)$(R=):state PP")
    field(DO1,  "3")
    field(LNK2, "$(P)$(R=):scan.SCAN PP")
    field(DO2,  "0")
}

#################################################
# Status:
#################################################

record(mbbiDirect, "$(P)$(R=):status") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto getInt(ER) $(PORT)")
}
record(longin, "$(P)$(R=):stat:comms") {
    field(INP, "@srs-rga.proto getInt(EC) $(PORT)")
}
record(longin, "$(P)$(R=):stat:filament") {
    field(INP, "@srs-rga.proto getInt(EF) $(PORT)")
}
record(longin, "$(P)$(R=):stat:elecmultiplier") {
    field(INP, "@srs-rga.proto getInt(EM) $(PORT)")
}
record(longin, "$(P)$(R=):stat:quadmassfilter") {
    field(INP, "@srs-rga.proto getInt(EQ) $(PORT)")
}
record(longin, "$(P)$(R=):stat:electrometer") {
    field(INP, "@srs-rga.proto getInt(ED) $(PORT)")
}
record(longin, "$(P)$(R=):stat:24Vexternal") {
    field(INP, "@srs-rga.proto getInt(EP) $(PORT)")
}
record(seq, "$(P)$(R=):stat:clear") {
    field(LNK1, "$(P)$(R=):stat:comms.PROC PP")
    field(LNK1, "$(P)$(R=):stat:comms.PROC PP")
    field(LNK1, "$(P)$(R=):stat:comms.PROC PP")
    field(LNK1, "$(P)$(R=):stat:comms.PROC PP")
    field(LNK1, "$(P)$(R=):stat:comms.PROC PP")
    field(LNK1, "$(P)$(R=):stat:comms.PROC PP")
    field(LNK1, "$(P)$(R=):stat:comms.PROC PP")
}
record(stringin, "$(P)$(R=):id") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto getString(ID) $(PORT)")
}

##################################################
# Get readbacks of everything:
##################################################

record(seq, "$(P)$(R=):scan") {
    field(LNK1, "$(P)$(R=):electron:e:rbk.PROC PP")
    field(DO1,  "1")
    field(DLY1, "0")
    field(LNK2, "$(P)$(R=):electron:i:rbk.PROC PP")
    field(DO2,  "1")
    field(DLY2, "0.2")
    field(LNK3, "$(P)$(R=):ion:e:rbk.PROC PP")
    field(DO3,  "1")
    field(DLY3, "0.2")
    field(LNK4, "$(P)$(R=):plate:v:rbk.PROC PP")
    field(DO4,  "1")
    field(DLY4, "0.2")
    field(LNK5, "$(P)$(R=):mass:initial:rbk.PROC PP")
    field(DO5,  "1")
    field(DLY5, "0.2")
    field(LNK6, "$(P)$(R=):mass:final:rbk.PROC PP")
    field(DO6,  "1")
    field(DLY6, "0.2")
    field(LNK7, "$(P)$(R=):pps:factor.PROC PP")
    field(DO7,  "1")
    field(DLY7, "0.2")
    field(LNK8, "$(P)$(R=):tps:factor.PROC PP")
    field(DO8,  "1")
    field(DLY8, "0.2")
    field(LNK9, "$(P)$(R=):noise:floor:rbk.PROC PP")
    field(DO9,  "1")
    field(DLY9, "0.2")
    field(LNKA, "$(P)$(R=):scan2.PROC PP")
    field(DOA,  "1")
    field(DLYA, "0.2")
}
record(seq, "$(P)$(R=):scan2") {
    field(LNK1, "$(P)$(R=):anascan:np:rbk.PROC PP")
    field(DO1,  "1")
    field(DLY1, "0")
# not using histogram scan, so disable this:
#    field(LNK2, "$(P)$(R=):histscan:np:rbk.PROC PP")
#    field(DO2,  "1")
#    field(DLY2, "0.2")
    field(LNK2, "$(P)$(R=):anascan:steps:per:amu:rbk.PROC PP")
    field(DO2,  "1")
    field(DLY2, "0.2")
    field(LNK3, "$(P)$(R=):id.PROC PP")
    field(DO3,  "1")
    field(DLY3, "0.2")
    field(LNK4, "$(P)$(R=):total:pressure.PROC PP")
    field(DO4,  "1")
    field(DLY4, "0.2")
    field(LNK5, "$(P)$(R=):status.PROC PP")
    field(DO5,  "1")
    field(DLY5, "0.2")
}
##################################################
# Calibrate/Reset:
##################################################

record(seq, "$(P)$(R=):calibrate:seq") {
    field(LNK1, "$(P)$(R=):state:calibrate.PROC PP")
    field(DO1,  "1")
    field(LNK2, "$(P)$(R=):calibrate.PROC PP")
    field(DO2,  "1")
    field(DLY2, "2")
}
record(seq, "$(P)$(R=):calibrate:iv:seq") {
    field(LNK1, "$(P)$(R=):state:calibrate.PROC PP")
    field(DO1,  "1")
    field(LNK2, "$(P)$(R=):calibrate:iv.PROC PP")
    field(DO2,  "1")
}
record(longin, "$(P)$(R=):calibrate") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto getInt(CA) $(PORT)")
    field(FLNK, "$(P)$(R=):calibrate:post.PROC PP")
}
record(longin, "$(P)$(R=):calibrate:iv") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto getInt(CL) $(PORT)")
    field(FLNK, "$(P)$(R=):calibrate:post.PROC PP")
}
record(seq, "$(P)$(R=):calibrate:post") {
    field(LNK1, "$(P)$(R=):tps:factor.PROC PP")
    field(DO1,  "1")
    field(DLY1, "0")
    field(LNK2, "$(P)$(R=):pps:factor.PROC PP")
    field(DO2,  "1")
    field(DLY2, "1")
    field(LNK3, "$(P)$(R=):state:idle.PROC PP")
    field(DO3,  "1")
    field(DLY3, "0")
}
record(bo, "$(P)$(R=):clear") {
    field(DTYP, "stream")
    field(OUT, "@srs-rga.proto command(IN0) $(PORT)")
    field(FLNK, "$(P)$(R=):status PP")
}
record(bo, "$(P)$(R=):factory") {
    field(DTYP, "stream")
    field(OUT, "@srs-rga.proto command(IN1) $(PORT)")
    field(FLNK, "$(P)$(R=):status PP")
}
record(bo, "$(P)$(R=):standby") {
    field(DTYP, "stream")
    field(OUT, "@srs-rga.proto command(IN2) $(PORT)")
    field(FLNK, "$(P)$(R=):status PP")
}
record(bo, "$(P)$(R=):abort") {
    field(DTYP, "stream")
    field(OUT, "@srs-rga.proto command(SC0) $(PORT)")
    field(FLNK, "$(P)$(R=):state:idle.PROC PP")
}

##################################################
# Detector Parameters:
##################################################

record(bo, "$(P)$(R=):filament:off") {
    field(DTYP, "stream")
    field(OUT, "@srs-rga.proto command(FL0.00) $(PORT)")
}
record(bo, "$(P)$(R=):filament:on") {
    field(DTYP, "stream")
    field(OUT, "@srs-rga.proto command(FL1.00) $(PORT)")
}
record(ai, "$(P)$(R=):electron:e:rbk") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto getFloat(EE) $(PORT)")
    field(EGU, "eV")
}
record(ao, "$(P)$(R=):electron:e") {
    field(DTYP, "stream")
    field(OUT, "@srs-rga.proto putInt(EE) $(PORT)")
    field(EGU, "eV")
    field(DRVL, "25")
    field(DRVH, "105")
}
record(ai, "$(P)$(R=):electron:i:rbk") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto getFloat(FL) $(PORT)")
    field(PREC, "2")
    field(EGU, "mA")
}
record(ao, "$(P)$(R=):electron:i") {
    field(DTYP, "stream")
    field(OUT, "@srs-rga.proto putFloat(FL) $(PORT)")
    field(DRVH, "3.50")
    field(PREC, "2")
    field(EGU, "mA")
}
record(ai, "$(P)$(R=):ion:e:rbk") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto getFloat(IE) $(PORT)")
    field(EGU, "eV")
}
record(ao, "$(P)$(R=):ion:e") {
    field(DTYP, "stream")
    field(OUT, "@srs-rga.proto putFloat(IE) $(PORT)")
    field(EGU, "eV")
}
record(ai, "$(P)$(R=):plate:v:rbk") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto getFloat(VF) $(PORT)")
    field(EGU, "V")
}
record(ao, "$(P)$(R=):plate:v") {
    field(DTYP, "stream")
    field(OUT, "@srs-rga.proto putFloat(VF) $(PORT)")
    field(EGU, "V")
}
record(mbbi, "$(P)$(R=):noise:floor:rbk") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto getInt(NF) $(PORT)")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(FRVL, "4")
    field(FVVL, "5")
    field(SXVL, "6")
    field(SVVL, "7")
    field(ZRST, "0")
    field(ONST, "1")
    field(TWST, "2")
    field(THST, "3")
    field(FRST, "4")
    field(FVST, "5")
    field(SXST, "6")
    field(SVST, "7")
}
record(mbbo, "$(P)$(R=):noise:floor") {
    field(DTYP, "stream")
    field(OUT, "@srs-rga.proto putInt(NF) $(PORT)")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(FRVL, "4")
    field(FVVL, "5")
    field(SXVL, "6")
    field(SVVL, "7")
    field(ZRST, "0")
    field(ONST, "1")
    field(TWST, "2")
    field(THST, "3")
    field(FRST, "4")
    field(FVST, "5")
    field(SXST, "6")
    field(SVST, "7")
}
record(ai, "$(P)$(R=):pps:factor") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto getFloat(SP) $(PORT)")
    field(EGU, "mA/Torr")
    field(PREC, "5")
    field(DESC, "Partial presseure sensitivity factor")
}
record(ai, "$(P)$(R=):tps:factor") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto getFloat(ST) $(PORT)")
    field(EGU, "mA/Torr")
    field(PREC, "5")
    field(DESC, "Total presseure sensitivity factor")
}
record(longin, "$(P)$(R=):total:pressure") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto pressure() $(PORT)")
    field(EGU, "E-16 A")
    field(FLNK, "$(P)$(R=):total:pressure:torr PP")
}
record(calc, "$(P)$(R=):total:pressure:torr") {
    field(INPA, "$(P)$(R=):total:pressure")
    field(INPB, "$(P)$(R=):tps:factor")
    field(CALC, "A*1E-16 / (B*1E-3)")
    field(EGU, "Torr")
    field(PREC, "5")
    field(DESC, "Total Pressure")
}

##################################################
# Scan Parameters:
##################################################

record(ai, "$(P)$(R=):mass:initial:rbk") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto getFloat(MI) $(PORT)")
    field(EGU, "amu")
}
record(ao, "$(P)$(R=):mass:initial") {
    field(DTYP, "stream")
    field(OUT, "@srs-rga.proto putFloat(MI) $(PORT)")
    field(EGU, "amu")
}
record(ai, "$(P)$(R=):mass:final:rbk") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto getFloat(MF) $(PORT)")
    field(EGU, "amu")
}
record(ao, "$(P)$(R=):mass:final") {
    field(DTYP, "stream")
    field(OUT, "@srs-rga.proto putFloat(MF) $(PORT)")
    field(EGU, "amu")
    field(DRVH, "$(MODEL)")
}
record(longin, "$(P)$(R=):anascan:np:rbk") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto getInt(AP) $(PORT)")
    field(DESC, "Number of analog scan points")
    field(FLNK, "$(P)$(R=):anascan:duration PP")
}
record(longin, "$(P)$(R=):histscan:np:rbk") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto getInt(HP) $(PORT)")
    field(DESC, "Number of histogram scan points")
}
record(ao, "$(P)$(R=):anascan:steps:per:amu") {
    field(DTYP, "stream")
    field(OUT, "@srs-rga.proto putInt(SA) $(PORT)")
    field(EGU, "amu^-1")
}
record(ai, "$(P)$(R=):anascan:steps:per:amu:rbk") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto getInt(SA) $(PORT)")
    field(EGU, "amu^-1")
}
record(calc, "$(P)$(R=):anascan:duration") {
    field(INPA, "$(P)$(R=):anascan:np:rbk")
    field(INPB, "$(P)$(R=):noise:floor:rbk")
    field(CALC, "A/991*(B=0?240:(B=1?140:(B=2?75:60)))")
    field(EGU,  "s")
}
record(seq, "$(P)$(R=):anascan:start:clocks") {
    field(LNK1, "$(P)$(R=):anascan:duration.PROC PP")
    field(DO1,  "1")
    field(LNK2, "$(P)$(R=):timer:go PP")
    field(DOL2, "$(P)$(R=):anascan:duration")
    field(DLY2, "2")
    field(LNK3, "$(P)$(R=):clock:go PP")
    field(DO3,  "1")
    field(DLY3, "0")
}

##################################################
# Scan Results:
##################################################

record(waveform, "$(P)$(R=):anascan:wf") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto scan(SC) $(PORT)")
    field(NELM, "$(NANA)")
    field(FTVL, "LONG")
    field(FLNK, "$(P)$(R=):anascan:post.PROC PP")
}
record(seq, "$(P)$(R=):anascan:post") {
    field(LNK1, "$(P)$(R=):total:pressure.PROC PP")
    field(DO1,  "1")
    field(DLY1, "0")
    field(LNK2, "$(P)$(R=):anascan:wf:torr.PROC PP")
    field(DO2,  "1")
    field(DLY2, "2")
}
record(acalcout, "$(P)$(R=):anascan:wf:torr") {
    field(NELM, "$(NANA)")
    field(INAA, "$(P)$(R=):anascan:wf")
    field(INPA, "$(P)$(R=):pps:factor")
    field(CALC, "AA*1E-16 / (A*1E-3)")
    field(OOPT, "Every Time")
    field(DOPT, "Use OCAL")
    field(OCAL, "1")
    field(OUT,  "$(P)$(R=):state:idle PP")
    field(FLNK, "$(P)$(R=):anascan:wf:pct.PROC PP")
}
record(acalcout, "$(P)$(R=):anascan:wf:pct") {
    field(NELM, "$(NANA)")
    field(INAA, "$(P)$(R=):anascan:wf")
    field(INPA, "$(P)$(R=):pps:factor")
    field(INPB, "$(P)$(R=):total:pressure:torr")
    field(CALC, "(AA*1E-16 / (A*1E-3)) / B * 100")
    field(FLNK, "$(P)$(R=):anascan:amu:wf.PROC PP")
}
record(acalcout, "$(P)$(R=):anascan:amu:wf") {
    field(NELM, "$(NANA)")
    field(INPA, "$(P)$(R=):mass:initial:rbk")
    field(INPB, "$(P)$(R=):mass:final:rbk")
    field(CALC, "IX / ($(NANA)-1) * (B-A) + A")
}

record(waveform, "$(P)$(R=):histscan:wf") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto scan(HS) $(PORT)")
    field(NELM, "$(NHIST)")
    field(FTVL, "LONG")
    field(FLNK, "$(P)$(R=):histscan:post.PROC PP")
}
record(seq, "$(P)$(R=):histscan:post") {
    field(LNK1, "$(P)$(R=):total:pressure.PROC PP")
    field(DO1,  "1")
    field(DLY1, "0")
    field(LNK2, "$(P)$(R=):histscan:wf:torr.PROC PP")
    field(DO2,  "1")
    field(DLY2, "2")
}
record(acalcout, "$(P)$(R=):histscan:wf:torr") {
    field(NELM, "$(NANA)")
    field(INAA, "$(P)$(R=):histscan:wf.AVAL")
    field(INPA, "$(P)$(R=):pps:factor")
    field(CALC, "AA*1E-16 / (A*1E-3)")
    field(OOPT, "Every Time")
    field(DOPT, "Use OCAL")
    field(OCAL, "1")
    field(OUT,  "$(P)$(R=):state:idle PP")
    field(FLNK, "$(P)$(R=):histscan:wf:pct.PROC PP")
}
record(acalcout, "$(P)$(R=):histscan:wf:pct") {
    field(NELM, "$(NANA)")
    field(INAA, "$(P)$(R=):histscan:wf")
    field(INPA, "$(P)$(R=):pps:factor")
    field(INPB, "$(P)$(R=):total:pressure:torr")
    field(CALC, "(AA*1E-16 / (A*1E-3)) / B * 100")
    field(FLNK, "$(P)$(R=):histscan:amu:wf PP")
}
record(acalcout, "$(P)$(R=):histscan:amu:wf") {
    field(NELM, "$(NHIST)")
    field(INPA, "$(P)$(R=):mass:initial:rbk")
    field(INPB, "$(P)$(R=):mass:final:rbk")
    field(CALC, "IX / ($(NHIST)-1) * (B-A) + A")
}

##################################################
# Scan Triggers:
##################################################

record(seq, "$(P)$(R=):anascan") {
    field(LNK1, "$(P)$(R=):state:measure PP")
    field(DO1,  "1")
    field(DLY1, "0")
    field(LNK2, "$(P)$(R=):anascan:start:clocks.PROC PP")
    field(DO2,  "1")
    field(DLY2, "10")
    field(LNK3, "$(P)$(R=):anascan:wf.PROC PP")
    field(DO3,  "1")
    field(DLY3, "0")
}
record(seq, "$(P)$(R=):histscan") {
    field(LNK1, "$(P)$(R=):state:measure PP")
    field(DO1,  "1")
    field(DLY1, "0")
    field(LNK2, "$(P)$(R=):anascan:start:clocks.PROC PP")
    field(DO2,  "1")
    field(DLY2, "5")
    field(LNK3, "$(P)$(R=):histscan:wf.PROC PP")
    field(DO3,  "1")
    field(DLY3, "0")
}

##################################################
# Single Mass Measurements:
##################################################

record(longin, "$(P)$(R=):mass") {
    field(DESC, "Mass value for single measurement")
    field(VAL, "16")
    field(EGU, "amu")
}
record(seq, "$(P)$(R=):mass:trigger") {
    field(LNK1, "$(P)$(R=):state:measure.PROC PP")
    field(DO1,  "1")
    field(DLY1, "0")
    field(LNK2, "$(P)$(R=):pps:factor.PROC PP")
    field(DO2,  "1")
    field(DLY2, "0")
    field(LNK3, "$(P)$(R=):tps:factor.PROC PP")
    field(DO3,  "1")
    field(DLY3, "1")
    field(LNK4, "$(P)$(R=):mass:measure PP")
    field(DO4,  "0")
    field(DLY4, "2")
}
record(longin, "$(P)$(R=):mass:measure") {
    field(DTYP, "stream")
    field(INP, "@srs-rga.proto mass($(P)$(R=):mass) $(PORT)")
    field(EGU, "E-16 A")
    field(DESC, "Single mass measurement")
    field(FLNK, "$(P)$(R=):mass:measure:post.PROC PP")
}
record(seq, "$(P)$(R=):mass:measure:post") {
    field(LNK1, "$(P)$(R=):total:pressure.PROC PP")
    field(DO1,  "1")
    field(DLY1, "0")
    field(LNK2, "$(P)$(R=):mass:measure:torr.PROC PP")
    field(DO2,  "1")
    field(DLY2, "5")
}
record(calc, "$(P)$(R=):mass:measure:torr") {
    field(INPA, "$(P)$(R=):mass:measure")
    field(INPB, "$(P)$(R=):pps:factor")
    field(CALC, "A*1E-16 / (B*1E-3)")
    field(EGU, "torr")
    field(PREC, "5")
    field(DESC, "Single mass measurement")
    field(FLNK, "$(P)$(R=):mass:measure:pct PP")
}
record(calcout, "$(P)$(R=):mass:measure:pct") {
    field(INPA, "$(P)$(R=):mass:measure:torr")
    field(INPB, "$(P)$(R=):total:pressure:torr")
    field(CALC, "A / B * 100")
    field(EGU, "%")
    field(PREC, "3")
    field(DESC, "Single mass measurement")
    field(OOPT, "Every Time")
    field(DOPT, "Use OCAL")
    field(OCAL, "1")
    field(OUT,  "$(P)$(R=):state:idle PP")
}

##################################################
# GUI stuff:
##################################################
#record(mbbi, "$(P)$(R=):graph:units") {
#    field(ZRVL, "0")
#    field(ONVL, "1")
#    field(TWVL, "2")
#    field(ZRST, "Amps")
#    field(ONST, "Torr")
#    field(TWST, "%")
#    field(VAL,  "2")
#}

